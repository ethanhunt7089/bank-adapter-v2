generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id                Int                 @id @default(autoincrement())
  targetDomain      String              @unique @map("target_domain")
  tokenHash         String?             @unique @map("token_hash")
  isActive          Boolean             @default(true) @map("is_active")
  paymentSys        String?             @map("payment_sys") // รองรับ payment systems: 'easypay', 'bibpay', 'onepayx'
  paymentKey        String?             @map("payment_key") // API key สำหรับ payment gateway (TOKEN สำหรับ PayOneX)
  paymentSecret     String?             @map("payment_secret") // Secret key สำหรับ payment gateway
  paymentAccess     String?             @map("payment_access") // Access key สำหรับ PayOneX
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  uuid              String              @unique @default(uuid()) @map("uuid")
  apiLogs           ApiLog[]
  transactionCursor TransactionCursor[]
  paymentChannels   PaymentChannel[]
  @@map("tokens")
}

model ApiLog {
  id           Int      @id @default(autoincrement())
  targetDomain String   @map("target_domain")
  endpoint     String
  method       String
  requestData  Json?    @map("request_data")
  responseData Json?    @map("response_data")
  statusCode   Int?     @map("status_code")
  createdAt    DateTime @default(now()) @map("created_at")
  uuid         String   @unique @default(uuid()) @map("uuid")
  token        Token    @relation(fields: [targetDomain], references: [targetDomain])

  @@map("api_logs")
}

model TransactionCursor {
  id                       Int      @id @default(autoincrement())
  tokenUuid                String   @map("token_uuid")
  lastSeenAt               DateTime @map("last_seen_at")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  from_bank_account_number String
  token                    Token    @relation(fields: [tokenUuid], references: [uuid], map: "fk_transaction_cursor_token")

  @@unique([tokenUuid, from_bank_account_number], map: "unique_token_account")
  @@map("transaction_cursors")
}

model payment_deposits {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ref_code               String    @unique @db.VarChar(100)
  amount                 Decimal   @db.Decimal(15, 2)
  deposit_amount         Decimal   @db.Decimal(15, 2)
  account_name           String    @db.VarChar(100)
  bank_number            String    @db.VarChar(50)
  bank_code              String    @db.VarChar(10)
  callback_url           String
  signature              String?   @db.VarChar(255)
  api_key                String?   @db.VarChar(255)
  gateway_type           String    @db.VarChar(20)
  status                 String?   @default("pending") @db.VarChar(20)
  qr_code                String?
  gateway_transaction_id String?   @db.VarChar(100)
  gateway_response       Json?
  token                  String?   @map("token") @db.Uuid
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @default(now()) @db.Timestamp(6)
  timeout_at             DateTime? @db.Timestamp(6)
  completed_at           DateTime? @db.Timestamp(6)
}

model payment_webhooks {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ref_code         String    @db.VarChar(100)
  transaction_type String    @db.VarChar(20)
  gateway_type     String    @db.VarChar(20)
  webhook_data     Json
  status           String?   @default("received") @db.VarChar(20)
  processed_at     DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
}

model payment_withdraw {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ref_code               String    @unique @db.VarChar(100)
  amount                 Decimal   @db.Decimal(15, 2)
  account_name           String    @db.VarChar(100)
  bank_number            String    @db.VarChar(50)
  bank_code              String    @db.VarChar(10)
  callback_url           String
  signature              String?   @db.VarChar(255)
  api_key                String?   @db.VarChar(255)
  gateway_type           String    @db.VarChar(20)
  status                 String?   @default("pending") @db.VarChar(20)
  gateway_transaction_id String?   @db.VarChar(100)
  gateway_response       Json?
  token                  String?   @map("token") @db.Uuid
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @default(now()) @db.Timestamp(6)
  completed_at           DateTime? @db.Timestamp(6)
}

model PaymentChannel {
  id            Int      @id @default(autoincrement())
  type          String   @db.VarChar(20) // "payment_gateway", "bank_sms", "bank_slip"
  bankCode      String?  @db.VarChar(10) // null สำหรับ payment_gateway
  bankNo        String?  @db.VarChar(50) // null สำหรับ payment_gateway  
  bankName      String?  @db.VarChar(100) // null สำหรับ payment_gateway
  paymentSys    String?  @db.VarChar(20) // สำหรับ payment_gateway เท่านั้น ("bib-pay", "onepay")
  enable        Boolean  @default(true)
  autoDeposit   Boolean  @default(false) @map("auto_deposit")
  autoWithdraw  Boolean  @default(false) @map("auto_withdraw")
  tokenUuid     String   @map("token_uuid") // เชื่อมกับ Token
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  token Token @relation(fields: [tokenUuid], references: [uuid])
  
  @@map("payment_channels")
}

model PayonexCustomer {
  id           Int      @id @default(autoincrement())
  customerId   String   @map("customer_id") @db.VarChar(50)
  accountName  String   @map("account_name") @db.VarChar(100)
  bankNumber   String   @map("bank_number") @db.VarChar(20)
  bankCode     String   @map("bank_code") @db.VarChar(10)
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([customerId], name: "idx_payonex_customer_id")
  @@index([accountName], name: "idx_payonex_account_name")
  @@index([bankNumber], name: "idx_payonex_bank_number")
  @@index([bankCode], name: "idx_payonex_bank_code")
  @@unique([accountName, bankNumber, bankCode], name: "unique_payonex_customer")
  @@map("payonex_customer")
}

model BankInfo {
  id           Int     @id @default(autoincrement())
  bankName     String  @map("bank_name") @db.VarChar(100)
  bankCode     String  @map("bank_code") @db.VarChar(10)
  centralCode  String? @map("central_code") @db.VarChar(10)
  bibCode      String? @map("bib_code") @db.VarChar(10)
  payonexCode  String? @map("payonex_code") @db.VarChar(10)

  @@unique([bankCode], name: "unique_bank_code")
  @@index([centralCode], name: "idx_bank_central_code")
  @@index([bibCode], name: "idx_bank_bib_code")
  @@index([payonexCode], name: "idx_bank_payonex_code")
  @@map("bank_info")
}

model BoToken {
  id           Int      @id @default(autoincrement())
  targetDomain String   @map("target_domain") @db.VarChar(500)
  token        String   @unique @map("token") @db.Uuid
  isActive     Boolean  @default(true) @map("is_active")
  withdraw     Boolean  @default(false)
  deposit      Boolean  @default(false)
  paymentSys   String?  @map("payment_sys") @db.VarChar(20)
  casUser      String?  @map("cas_user") @db.VarChar(100)
  casPassword  String?  @map("cas_pwd") @db.VarChar(255)
  trueSecret   String?  @map("true_secret") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  paymentKeys  PaymentKey[]
  users        User[]       // One-to-many relation to User
  
  @@map("bo_token")
}

model PaymentKey {
  id            Int      @id @default(autoincrement())
  token         String   @map("token") @db.Uuid
  paymentSys    String   @map("payment_sys") @db.VarChar(20)
  paymentKey    String?  @map("payment_key") @db.VarChar(100)
  paymentSecret String?  @map("payment_secret") @db.VarChar(100)
  paymentAccess String?  @map("payment_access") @db.VarChar(100)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  boToken BoToken @relation(fields: [token], references: [token])
  
  @@unique([token, paymentSys], name: "unique_token_payment_sys")
  @@index([token], name: "idx_payment_key_token")
  @@index([paymentSys], name: "idx_payment_key_payment_sys")
  @@map("payment_key")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(50)
  password  String   @db.VarChar(255) // hashed password
  token     String?  @db.Uuid
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relation to BoToken
  boToken BoToken? @relation(fields: [token], references: [token])

  @@index([username], name: "idx_user_username")
  @@index([token], name: "idx_user_token")
  @@map("users")
}