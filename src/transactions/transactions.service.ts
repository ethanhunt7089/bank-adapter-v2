import { HttpException, Injectable } from "@nestjs/common";
import { prisma } from "../lib/prisma";
import { getTargetDomainAndTokenByUuid } from "../lib/token-utils";

@Injectable()
export class TransactionsService {
  constructor() {}

  // ‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ JWT ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß

  async processGetTransactions(
    queryData: {
      fromBankAccountNumber?: string;
      fromName?: string;
    },
    uuid: string
  ) {
    try {
      // ‡∏î‡∏∂‡∏á targetDomain ‡πÅ‡∏•‡∏∞ tokenHash ‡∏à‡∏≤‡∏Å DB ‡∏î‡πâ‡∏ß‡∏¢ UUID
      const resolved = await getTargetDomainAndTokenByUuid(uuid);
      if (!resolved) {
        throw new HttpException(
          "Invalid API Token: token not found or inactive",
          400
        );
      }
      const { targetDomain: backendUrl, tokenHash } = resolved;

      // ‡∏≠‡πà‡∏≤‡∏ô cursor ‡∏ï‡πà‡∏≠ API Token
      const cursor = await prisma.transactionCursor
        .findFirst({ where: { tokenUuid: uuid } })
        .catch(() => null);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì fromDate: ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‚Üí '0', ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí lastSeenAt (LA time, +1s) ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï 'YYYY-MM-DD HH:mm:ss'
      const toLaosTime = (d: Date) =>
        new Date(d.getTime() + 7 * 60 * 60 * 1000);
      const plusOneSecond = (d: Date) => new Date(d.getTime() + 1000);
      const formatDateTime = (d: Date) => {
        const pad = (n: number) => n.toString().padStart(2, "0");
        const yyyy = d.getFullYear();
        const MM = pad(d.getMonth() + 1);
        const dd = pad(d.getDate());
        const HH = pad(d.getHours());
        const mm = pad(d.getMinutes());
        const ss = pad(d.getSeconds());
        return `${yyyy}-${MM}-${dd} ${HH}:${mm}:${ss}`;
      };

      const computedFromDate = cursor
        ? plusOneSecond(new Date(cursor.lastSeenAt))
        : null;
      const fromDateParam = computedFromDate
        ? formatDateTime(toLaosTime(computedFromDate))
        : "0";

      const queryParams = new URLSearchParams();
      // ‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏á upstream
      queryParams.append(
        "fromBankAccountNumber",
        queryData.fromBankAccountNumber ?? ""
      );
      queryParams.append("fromName", queryData.fromName ?? "");
      queryParams.append("fromDate", fromDateParam);
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö fromDate ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend API
      const fullUrl = `${backendUrl}/api/transactions?${queryParams.toString()}`;

      console.log("üåê Backend URL from API Token:", backendUrl);
      console.log("üîó Full URL:", fullUrl);
      console.log("üîë Forwarding API Token in Authorization header");
      console.log(
        "üïí Using fromDate (LA +1s):",
        fromDateParam,
        "| cursor:",
        cursor?.lastSeenAt ?? "none"
      );

      const response = await fetch(fullUrl, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          // ‡∏™‡πà‡∏á uuid ‡∏ú‡πà‡∏≤‡∏ô Authorization header ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
          Authorization: `Bearer ${uuid}`,
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new HttpException(
          errorData.error || "Backend API error",
          response.status
        );
      }

      const result: any = await response.json();

      result.data = (result.data ?? []).map((tx: any) => ({
        creditType: tx.creditType,
        amount: tx.amount,
        currency: tx.currency,
        status: tx.status,
        fromName: tx.fromName,
        fromBankCode: tx.fromBankCode,
        fromBankAccountNumber: tx.fromBankAccountNumber,
        toName: tx.toName,
        toBankCode: tx.toBankCode,
        toBankAccountNumber: tx.toBankAccountNumber,
        remarks: tx.remarks,
        transactionTimestamp: tx.transactionTimestampV2,
      }));

      // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ transactionTimestamp ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å data
      if (result.data && result.data.length > 0) {
        const latestTimestamp = result.data
          .map((tx: any) => tx.transactionTimestamp)
          .filter(Boolean) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ null/undefined ‡∏≠‡∏≠‡∏Å
          .sort(
            (a: string, b: string) =>
              new Date(b).getTime() - new Date(a).getTime()
          )[0]; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

        result.transactionTimestamp = latestTimestamp;

        // Update transactionCursor ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if (latestTimestamp) {
          // ‡πÉ‡∏ä‡πâ findFirst ‡πÅ‡∏•‡∏∞ updateMany ‡πÅ‡∏ó‡∏ô upsert ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ compound unique constraint
          const existingCursor = await prisma.transactionCursor.findFirst({
            where: { tokenUuid: uuid },
          });

          if (existingCursor) {
            await prisma.transactionCursor.update({
              where: { id: existingCursor.id },
              data: { lastSeenAt: new Date(latestTimestamp) },
            });
          } else {
            await prisma.transactionCursor.create({
              data: {
                tokenUuid: uuid,
                lastSeenAt: new Date(latestTimestamp),
                from_bank_account_number: queryData.fromBankAccountNumber ?? "",
              },
            });
          }
        }
      }

      // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ map ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      return result;
    } catch (error) {
      console.error("Process get transactions error:", error);
      console.error("Error details:", {
        message: error.message,
        code: error.code,
        cause: error.cause,
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error log (console.log ‡πÅ‡∏ó‡∏ô database)
      console.log("Transaction Error Log:", {
        targetDomain: "unknown",
        endpoint: "/api/transactions",
        method: "GET",
        requestQuery: queryData,
        responseBody: JSON.stringify({ error: error.message }),
        statusCode: error.status || 500,
        isSuccess: false,
      });

      throw error;
    }
  }
}
